{"title":"设计模式","date":"2019-06-05T14:24:53.000Z","date_formatted":{"ll":"2019年6月5日","L":"2019/06/05","MM-DD":"06-05"},"link":"2019/06/05/设计模式","tags":["设计模式"],"categories":["Java"],"updated":"2019-12-01T14:26:30.060Z","content":"<!-- build time:Mon Dec 02 2019 23:46:56 GMT+0800 (GMT+08:00) --><p>设计模式学习总结。</p><a id=\"more\"></a><h2 id=\"创建型模式\">创建型模式<a href=\"2019/06/05/设计模式#创建型模式\"></a></h2><h3 id=\"简单工厂模式\">简单工厂模式<a href=\"2019/06/05/设计模式#简单工厂模式\"></a></h3><p>不同实例对象有共同的基类。</p><p>工厂负责根据入参创建不同的实例对象，返回的是实例对象的基类。</p><p>类比：类的构造方法重载</p><h3 id=\"工厂方法模式\">工厂方法模式<a href=\"2019/06/05/设计模式#工厂方法模式\"></a></h3><p>不同工厂实现不同产品实例对象的创建，这些工厂共有一个工厂基类。工厂基类中定义创建产品的公共方法。</p><p>不同产品共有一个产品基类，不同工厂的创建产品方法返回类型为产品基类。</p><p>类比：jdbc 创建连接</p><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Connection conn=DriverManager.getConnection(<span class=\"string\">\"jdbc:microsoft:sqlserver://localhost:1433; DatabaseName=DB;user=sa;password=\"</span>);</span><br><span class=\"line\">Statement statement=conn.createStatement();</span><br></pre></td></tr></table></div></figure><h3 id=\"抽象工厂模式\">抽象工厂模式<a href=\"2019/06/05/设计模式#抽象工厂模式\"></a></h3><p>角色：一个抽象工厂，具体工厂，多个抽象产品（产品等级结构），具体产品。抽象工厂里面定义创建不同抽象产品的方法。具体工厂实现方法创建具体产品，一个具体工厂里面创建的所有产品组成一个产品族，这些产品有不同的产品基类。</p><p>能够很方便的生成不同的产品族，只需要新增加一个具体工厂；但是当有新的抽象产品出现时，需要更改抽象工厂，以及抽象工厂的每一个具体工厂子类。</p><p>类比：页面更换主题时，字体，颜色，按钮等会一起更换</p><p><strong>当抽象工厂模式中每一个具体工厂类只创建一个产品对象，也就是只存在一个产品等级结构时，抽象工厂模式退化成工厂方法模式；当工厂方法模式中抽象工厂与具体工厂合并，提供一个统一的工厂来创建产品对象，并将创建对象的工厂方法设计为静态方法时，工厂方法模式退化成简单工厂模式。</strong></p><h3 id=\"建造者模式\">建造者模式<a href=\"2019/06/05/设计模式#建造者模式\"></a></h3><p>角色：抽象建造者，具体建造者，指挥者，产品角色</p><p>指挥者根据抽象建造者编程，安排建造顺序，使得相同的创建过程可以创建不同类型的产品。</p><p>类比：汽车组装工厂</p><h3 id=\"单例模式\">单例模式<a href=\"2019/06/05/设计模式#单例模式\"></a></h3><p>单例类的构造函数为私有，防止通过 new 来创建多个对象；</p><p>提供一个自身的静态私有成员变量，存储单例对象；</p><p>提供一个公有的静态工厂方法，在生成对象前检查是否已经存在对象，确保生成一个对象</p><p>类比：全局ID生成器</p><h2 id=\"结构型模式\">结构型模式<a href=\"2019/06/05/设计模式#结构型模式\"></a></h2><h3 id=\"适配器模式\">适配器模式<a href=\"2019/06/05/设计模式#适配器模式\"></a></h3><p>角色：目标抽象类，适配器类，适配者类，客户类</p><p>适配器提供客户类需要的接口，适配器的实现就是把客户类的请求转化为适配者的相应接口的调用</p><p>类比：电源适配器，转接口适配器</p><h3 id=\"桥接模式\">桥接模式<a href=\"2019/06/05/设计模式#桥接模式\"></a></h3><p>角色：抽象类，扩充抽象类，实现类接口，具体实现类</p><p>抽象类中与实现类接口为关联关系而不是继承关系，使得抽象化与实现化脱耦</p><p>类比：跨平台视频播放器，可以在不同操作系统播放不同格式的文件</p><h3 id=\"装饰模式\">装饰模式<a href=\"2019/06/05/设计模式#装饰模式\"></a></h3><p>角色：抽象构件，具体构件，抽象装饰类，具体装饰类</p><p>抽象构件定义了对象的接口，可以给这些对 象动态增加职责（方法）；具体构件定义了具体的构件对象，实现了 在抽象构件中声明的方法，装饰器可以给它增加额外的职责（方法）； 抽象装饰类是抽象构件类的子类，用于给具体构件增加职责，但是具 体职责在其子类中实现；具体装饰类是抽象装饰类的子类，负责向构 件添加新的职责。</p><p>类比：变形金刚，拥有基本功能，还可以根据需要产生新的功能</p><h3 id=\"外观模式\">外观模式<a href=\"2019/06/05/设计模式#外观模式\"></a></h3><p>角色：一个外观角色，多个子系统角色</p><p>客户访问子系统统一通过外观角色访问，由外观角色分配请求给具体的子系统</p><p>类比：网关，controller 层</p><h3 id=\"享元模式\">享元模式<a href=\"2019/06/05/设计模式#享元模式\"></a></h3><p>角色：抽象享元类，具体享元类，非共享具体享元类，享元工厂类</p><p>抽象享元类声明一个接口，通过它可以接受并作用于外部状态；具体享元类实现了抽象享元接口，其实例称为享元对象；非共享具体享元是不能被共享的抽象享元类的子类；享元工厂类用于创建并管理享元对象，它针对抽象享元类编程，将各种类型的具体享元对象存储在一个享元池中。</p><p>类比：JVM 中创建的 Class 类对象</p><h3 id=\"代理模式\">代理模式<a href=\"2019/06/05/设计模式#代理模式\"></a></h3><p>角色：抽象主题角色，代理主题角色，真实主题角色</p><p>抽象主题角色声明了真实主题和代理主题的共同接口；代理主题角色内部包含对真实主题的引用，从而可以在任何时候操作真实主题对象；真实主题角色定义了代理角色所代表的真实对象，在真实主题角色中实现了真实的业务操作，客户端可以通过代理主题角色间接调用真实主题角色中定义的方法。</p><p>动态代理：不知道真实主题角色的情况下代理主题角色</p><p>类比：日志框架，spring AOP, jumpserver, 防火墙</p><h2 id=\"行为型模式\">行为型模式<a href=\"2019/06/05/设计模式#行为型模式\"></a></h2><h3 id=\"命令模式\">命令模式<a href=\"2019/06/05/设计模式#命令模式\"></a></h3><p>角色：抽象命令类，具体命令类，调用者，接收者，客户类</p><p>抽象命令类中声明了用于执行请求的execute()等方法，通过这些方法可以调用请求接收者的相关操作；具体命令类是抽象命令类的子类，实现了在抽象命令类中声明的方法，它对应具体的接收者对象，将接收者对象的动作绑定其中；调用者即请求的发送者，又称为请求者，它通过命令对象来执行请求；接收者执行与请求相关的操作，它具体实现对请求的业务处理。</p><p>类比：批量命令脚本，存储过程</p><h3 id=\"中介者模式\">中介者模式<a href=\"2019/06/05/设计模式#中介者模式\"></a></h3><p>角色：抽象中介者，具体中介者，抽象同事类，具体同事类</p><p>抽象中介者用于定义一个接口，该接口用于与各同事对象之间的通信；具体中介者是抽象中介者的子类，通过协调各个同事对象来实现协作行为，了解并维护它的各个同事对象的引用；抽象同事类定义各同事的公有方法；具体同事类是抽象同事类的子类，每一个同事对象都引用一个中介者对象；每一个同事对象在需要和其他同事对象通信时，先与中介者通信，通过中介者来间接完成与其他同事类的通信；在具体同事类中实现了在抽象同事类中定义的方法。</p><p>类比：ESB 服务总线，MVC 中的 controller 控制 view 和 model 的交互</p><h3 id=\"观察者模式\">观察者模式<a href=\"2019/06/05/设计模式#观察者模式\"></a></h3><p>角色：目标，具体目标，观察者，具体观察者</p><p>目标又称为主题，它是指被观察的对象；具体目标是目标类的子类，通常它包含有经常发生改变的数据，当它的状态发生改变时，向它的各个观察者发出通知；观察者将对观察目标的改变做出反应；在具体观察者中维护一个指向具体目标对象的引用，它存储具体观察者的有关状态，这些状态需要和具体目标的状态保持一致。</p><p>类比：发布订阅，listenner，一对多的对象交互</p><h3 id=\"状态模式\">状态模式<a href=\"2019/06/05/设计模式#状态模式\"></a></h3><p>角色：环境类，抽象状态类，具体状态类</p><p>环境类又称为上下文类，它是拥有状态的对象，在环境类中维护一个抽象状态类State的实例，这个实例定义当前状态，在具体实现时，它是一个State子类的对象，可以定义初始状态；抽象状态类用于定义一个接口以封装与环境类的一个特定状态相关的行为；具体状态类是抽象状态类的子类，每一个子类实现一个与环境类的一个状态相关的行为，每一个具体状态类对应环境的一个具体状态，不同的具体状态类其行为有所不同。</p><p>类比：TCP协议连接的多状态，case</p><h3 id=\"策略模式\">策略模式<a href=\"2019/06/05/设计模式#策略模式\"></a></h3><p>角色：环境类，抽象策略类，具体策略类</p><p>环境类在解决某个问题时可以采用多种策略，在环境类中维护一个对抽象策略类的引用实例；抽象策略类为所支持的算法声明了抽象方法，是所有策略类的父类；具体策略类实现了在抽象策略类中定义的算法。</p><p>类比：封装的不同排序算法</p><!-- rebuild by neat -->","prev":{"title":"软件定义网络","link":"2019/06/25/25. 软件定义网络"},"next":{"title":"Struts-JSP传值","link":"2019/06/03/Struts-JSP传值"},"plink":"https://www.jayli.cn/2019/06/05/设计模式/","toc":[{"title":"创建型模式","id":"创建型模式","index":"1","children":[{"title":"简单工厂模式","id":"简单工厂模式","index":"1.1"},{"title":"工厂方法模式","id":"工厂方法模式","index":"1.2"},{"title":"抽象工厂模式","id":"抽象工厂模式","index":"1.3"},{"title":"建造者模式","id":"建造者模式","index":"1.4"},{"title":"单例模式","id":"单例模式","index":"1.5"}]},{"title":"结构型模式","id":"结构型模式","index":"2","children":[{"title":"适配器模式","id":"适配器模式","index":"2.1"},{"title":"桥接模式","id":"桥接模式","index":"2.2"},{"title":"装饰模式","id":"装饰模式","index":"2.3"},{"title":"外观模式","id":"外观模式","index":"2.4"},{"title":"享元模式","id":"享元模式","index":"2.5"},{"title":"代理模式","id":"代理模式","index":"2.6"}]},{"title":"行为型模式","id":"行为型模式","index":"3","children":[{"title":"命令模式","id":"命令模式","index":"3.1"},{"title":"中介者模式","id":"中介者模式","index":"3.2"},{"title":"观察者模式","id":"观察者模式","index":"3.3"},{"title":"状态模式","id":"状态模式","index":"3.4"},{"title":"策略模式","id":"策略模式","index":"3.5"}]}],"copyright":{"link":"<a href=\"https://www.jayli.cn/2019/06/05/设计模式/\" title=\"设计模式\">https://www.jayli.cn/2019/06/05/设计模式/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)","published":"2019年6月5日","author":"Jayli"}}