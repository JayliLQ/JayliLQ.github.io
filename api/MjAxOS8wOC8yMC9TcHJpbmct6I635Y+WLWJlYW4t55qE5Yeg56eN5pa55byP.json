{"title":"Spring 获取 bean 的几种方式","date":"2019-08-20T14:29:19.000Z","date_formatted":{"ll":"2019年8月20日","L":"2019/08/20","MM-DD":"08-20"},"link":"2019/08/20/Spring-获取-bean-的几种方式","tags":["Java,Spring"],"categories":["Java"],"updated":"2019-12-02T14:39:26.237Z","content":"<!-- build time:Sun Aug 23 2020 21:12:13 GMT+0800 (GMT+08:00) --><p>转自<a href=\"https://www.ktanx.com/blog/p/326\" target=\"_blank\" rel=\"noopener\">Spring在代码中获取bean的几种方式</a><br><a id=\"more\"></a></p><ol><li>在初始化时保存ApplicationContext对象</li></ol><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ApplicationContext ac = new FileSystemXmlApplicationContext(<span class=\"string\">\"applicationContext.xml\"</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">ac.getBean(<span class=\"string\">\"beanId\"</span>)<span class=\"comment\">;</span></span><br></pre></td></tr></table></div></figure><p>说明：这种方式适用于采用Spring框架的独立应用程序，需要程序通过配置文件手工初始化Spring的情况。</p><ol start=\"2\"><li>通过Spring提供的utils类获取ApplicationContext对象</li></ol><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ApplicationContext ac1 = WebApplicationContextUtils.getRequiredWebApplicationContext(ServletContext sc)<span class=\"comment\">;</span></span><br><span class=\"line\">ApplicationContext ac2 = WebApplicationContextUtils.getWebApplicationContext(ServletContext sc)<span class=\"comment\">;</span></span><br><span class=\"line\">ac1.getBean(<span class=\"string\">\"beanId\"</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">ac2.getBean(<span class=\"string\">\"beanId\"</span>)<span class=\"comment\">;</span></span><br></pre></td></tr></table></div></figure><p>说明：这种方式适合于采用Spring框架的B/S系统，通过ServletContext对象获取ApplicationContext对象，然后在通过它获取需要的类实例。上面两个工具方式的区别是，前者在获取失败时抛出异常，后者返回null</p><ol start=\"3\"><li><p>继承自抽象类ApplicationObjectSupport<br>说明：抽象类ApplicationObjectSupport提供getApplicationContext()方法，可以方便的获取ApplicationContext。<br>Spring初始化时，会通过该抽象类的setApplicationContext(ApplicationContext context)方法将ApplicationContext 对象注入。</p></li><li><p>继承自抽象类WebApplicationObjectSupport<br>说明：类似上面方法，调用getWebApplicationContext()获取WebApplicationContext</p></li><li><p>实现接口ApplicationContextAware<br>说明：实现该接口的setApplicationContext(ApplicationContext context)方法，并保存ApplicationContext 对象。Spring初始化时，会通过该方法将ApplicationContext对象注入。<br>以下是实现ApplicationContextAware接口方式的代码，前面两种方法类似：</p></li></ol><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpringContextUtil</span> <span class=\"keyword\">implements</span> <span class=\"title\">ApplicationContextAware</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">// Spring应用上下文环境</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ApplicationContext applicationContext;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 实现ApplicationContextAware接口的回调方法，设置上下文环境</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span> applicationContext</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setApplicationContext</span><span class=\"params\">(ApplicationContext applicationContext)</span> </span>&#123;</span><br><span class=\"line\">SpringContextUtil.applicationContext = applicationContext;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@return</span> ApplicationContext</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\">ApplicationContext <span class=\"title\">getApplicationContext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> applicationContext;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 获取对象</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span> name</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@return</span> Object</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@throws</span> BeansException</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\">Object <span class=\"title\">getBean</span><span class=\"params\">(String name)</span> <span class=\"keyword\">throws</span> BeansException </span>&#123;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">return</span> applicationContext.<span class=\"title\">getBean</span><span class=\"params\">(name)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure><p>虽然，spring提供的后三种方法可以实现在普通的类中继承或实现相应的类或接口来获取spring 的ApplicationContext对象，但是在使用是一定要注意实现了这些类或接口的普通java类一定要在Spring 的配置文件applicationContext.xml文件中进行配置。否则获取的ApplicationContext对象将为null。</p><ol start=\"6\"><li>通过Spring提供的ContextLoader</li></ol><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WebApplicationContext wac = ContextLoader.getCurrentWebApplicationContext()<span class=\"comment\">;</span></span><br><span class=\"line\">wac.getBean(beanID)<span class=\"comment\">;</span></span><br></pre></td></tr></table></div></figure><p>最后提供一种不依赖于servlet,不需要注入的方式。但是需要注意一点，在服务器启动时，Spring容器初始化时，不能通过以下方法获取Spring 容器，细节可以查看spring源码org.springframework.web.context.ContextLoader。</p><!-- rebuild by neat -->","prev":{"title":"GVIM 配置文件","link":"2019/08/27/winVim配置文件"},"next":{"title":"Web Service","link":"2019/08/16/Web-Service"},"plink":"https://www.jayli.cn/2019/08/20/Spring-获取-bean-的几种方式/"}