{"title":"P2P协议","date":"2019-06-25T14:49:24.000Z","date_formatted":{"ll":"2019年6月25日","L":"2019/06/25","MM-DD":"06-25"},"link":"2019/06/25/P2P协议","tags":["网络协议"],"categories":["网络协议"],"updated":"2019-12-01T14:51:46.776Z","content":"<!-- build time:Sun Aug 23 2020 20:59:40 GMT+0800 (GMT+08:00) --><p>P2P 协议总结。<br><a id=\"more\"></a></p><h2 id=\"下载文件\">下载文件<a href=\"2019/06/25/P2P协议#下载文件\"></a></h2><ul><li>通过 HTTP 下载</li><li>通过 FTP 下载，FTP 建立两个 TCP 连接来传输一个文件</li><li>通过 P2P 下载</li></ul><h2 id=\"FTP-的两种工作模式\">FTP 的两种工作模式<a href=\"2019/06/25/P2P协议#FTP-的两种工作模式\"></a></h2><p>在 FTP 服务器的角度来说</p><ul><li>主动模式（PORT）</li></ul><blockquote><p>客户端随机打开一个大于 1024 的端口 N，向服务器 21 端口发起连接，同时开放 N+1 端口监听，并将 N+1 端口告知服务器，由服务器从自己的数据端口 20 主动连接客户端的数据端口 N+1</p></blockquote><ul><li>被动模式（PASV）</li></ul><blockquote><p>客户端打开两个大于 1024 的任意端口 N 和 N+1，第一个端口连接服务器的 21 端口，提交 PASV 命令。然后服务器打开一个大于 1024 的任意端口 P，并告知客户端。客户端从 N+1 端口连接服务器 P 端口，进行数据传输</p></blockquote><h2 id=\"种子（-torrent）文件\">种子（.torrent）文件<a href=\"2019/06/25/P2P协议#种子（-torrent）文件\"></a></h2><p>.torrent 文件由 announce（tracker URL）和 文件信息组成</p><ul><li>文件信息内容如下<ul><li>info 区：该种子有几个文件，文件有多长，目录结构，目录及文件名</li><li>Name 字段：顶层目录名</li><li>每个段大小</li><li>段哈希值：将整个种子中，每段的 SHA-1 哈希值拼在一起</li></ul></li></ul><p>下载文件时，BT 客户端先解析.torrent 文件，得到 tracker 地址，然后连接 tracker 服务器，tracker 服务器回应下载者的请求，将其他下载者的 IP 提供给下载者，下载者再连接其他下载者，根据 .torrent 文件，两者分别告知对方自己已经有的段，然后交换对方没有的数据。此时不需要其他服务器参与，并分散了单个线路上的数据流量，因此减轻了服务器的负担。但是 <strong>tracker 服务器是弊端</strong> ，一旦 tracker 服务器出现问题，BT 工具就无法工作</p><h2 id=\"去中心化网络（DHT，Distributed-Hash-Table）\">去中心化网络（DHT，Distributed Hash Table）<a href=\"2019/06/25/P2P协议#去中心化网络（DHT，Distributed-Hash-Table）\"></a></h2><p><img src=\"https://static001.geekbang.org/resource/image/8e/cf/8ece62f3f99cb3fe7ee0274a1ad79fcf.jpg\" alt=\"DHT 网络\" class=\"article-img\"></p><p>任何一个 BitTorrent 启动后，它都有两个角色，一个是 peer，监听一个 TCP 端口，用来上传和下载文件，这个角色表名，我这里有某个文件。另一个角色 DHT node，监听一个 UDP 端口，通过这个角色，这个节点加入了一个 DHT 的网络</p><p>DHT 网络里，每个 DHT node 都有一个 ID，每个 DHT node 都有责任掌握一些信息，即文件索引，即它应该知道某些文件是保存在哪些节点上，而它本身不一定就是保存这个文件的节点</p><p>DHT node ID 是一个随机选择的 160 bits(20字节) 空间，文件的哈希也使用这样的 160 bits 空间</p><h2 id=\"小结\">小结<a href=\"2019/06/25/P2P协议#小结\"></a></h2><ul><li>下载一个文件可以使用 HTTP 或 FTP，这两种都是集中下载的方式，而 P2P 则换了一种思路，采取非中心化下载的方式</li><li>P2P 也是有两种，一种是依赖于 tracker 的，也即元数据集中，文件数据分散；一种是基于分布式的哈希算法，元数据和文件数据全部分散</li></ul><h2 id=\"思考\">思考<a href=\"2019/06/25/P2P协议#思考\"></a></h2><ol><li>除了这种去中心化分布式哈希的算法，你还能想到其他的应用场景吗？</li><li>在前面的所有章节中，要下载一个文件，都需要使用域名。但是网络通信是使用 IP 的，那你知道怎么实现两者的映射机制吗？</li></ol><!-- rebuild by neat -->","prev":{"title":"数据中心","link":"2019/06/25/21. 数据中心"},"next":{"title":"HTTPDNS","link":"2019/06/25/19. HTTPDNS"},"plink":"https://www.jayli.cn/2019/06/25/P2P协议/","toc":[{"title":"下载文件","id":"下载文件","index":"1"},{"title":"FTP 的两种工作模式","id":"FTP-的两种工作模式","index":"2"},{"title":"种子（.torrent）文件","id":"种子（-torrent）文件","index":"3"},{"title":"去中心化网络（DHT，Distributed Hash Table）","id":"去中心化网络（DHT，Distributed-Hash-Table）","index":"4"},{"title":"小结","id":"小结","index":"5"},{"title":"思考","id":"思考","index":"6"}],"copyright":{"link":"<a href=\"https://www.jayli.cn/2019/06/25/P2P协议/\" title=\"P2P协议\">https://www.jayli.cn/2019/06/25/P2P协议/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)","published":"2019年6月25日","author":"Jayli"}}